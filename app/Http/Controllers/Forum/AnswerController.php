<?php
/**
 * Created by PhpStorm.
 * User: lucas
 * Date: 17/03/19
 * Time: 20:15
 */

namespace App\Http\Controllers\Forum;


use App\Entities\Lesson\Forum\Answer;
use App\Entities\Section\Section;
use App\FieldManagers\Forum\AnswerFieldManager;
use App\Http\Controllers\ApiController;
use App\Traits\ApiResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class AnswerController extends ApiController
{
    use ApiResponse;

    public function __construct(Answer $model, AnswerFieldManager $fieldManager)
    {
        $this->fieldManager = $fieldManager;
        $this->model = $model;
    }

    /**
     * @OA\Get(
     *     path="/sections/{section_id}/lessons/{lesson_id}/questions/{question_id}/answers",
     *     summary="Lista todas as respostas de uma questão",
     *     operationId="GetQuestionAnswers",
     *     tags={"answers"},
     *     @OA\Parameter(
     *         name="section_id",
     *         in="path",
     *         description="Id da sessão",
     *         required=true,
     *         @OA\Schema(
     *           type="integer",
     *         )
     *     ),
     *     @OA\Parameter(
     *         name="lesson_id",
     *         in="path",
     *         description="Id da lição",
     *         required=true,
     *         @OA\Schema(
     *           type="integer",
     *         )
     *     ),
     *     @OA\Parameter(
     *         name="question_id",
     *         in="path",
     *         description="Id da questão",
     *         required=true,
     *         @OA\Schema(
     *           type="integer",
     *         )
     *     ),
     *     @OA\Parameter(
     *         name="includes",
     *         in="query",
     *         description="Faz o include das relações",
     *         required=false,
     *         @OA\Schema(
     *           type="array",
     *           @OA\Items(type="string")
     *         )
     *     ),
     *     @OA\Parameter(
     *         name="user_id",
     *         in="query",
     *         description="Id do usuário",
     *         required=false,
     *         @OA\Schema(
     *           type="string",
     *         )
     *     ),
     *     @OA\Parameter(
     *         name="description",
     *         in="query",
     *         description="Descrição da resposta",
     *         required=false,
     *         @OA\Schema(
     *           type="string",
     *         )
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="...",
     *     )
     * )
     */
    public function getAnswers(Request $request, int $section_id, int $lesson_id, int $question_id)
    {
        Section::findOrFail($section_id)
            ->lessons()->findOrFail($lesson_id)
            ->questions()->findOrFail($question_id);

        $request->merge(['question_id' => $question_id]);

        return parent::index($request); // TODO: Change the autogenerated stub
    }

    /**
     * @OA\Post(
     *     path="/sections/{section_id}/lessons/{lesson_id}/questions/{question_id}/answers",
     *     summary="Cria a resposta de uma questão",
     *     operationId="PostQuestionAnswer",
     *     tags={"answers"},
     *     security={{"apiToken":{}}},
     *     @OA\Parameter(
     *         name="section_id",
     *         in="path",
     *         description="Id da sessão",
     *         required=true,
     *         @OA\Schema(
     *           type="integer",
     *         )
     *     ),
     *     @OA\Parameter(
     *         name="lesson_id",
     *         in="path",
     *         description="Id da lição",
     *         required=true,
     *         @OA\Schema(
     *           type="integer",
     *         )
     *     ),
     *     @OA\Parameter(
     *         name="question_id",
     *         in="path",
     *         description="Id da questão",
     *         required=true,
     *         @OA\Schema(
     *           type="integer",
     *         )
     *     ),
     *     @OA\Parameter(
     *         name="description",
     *         in="query",
     *         description="Descrição da resposta",
     *         required=true,
     *         @OA\Schema(
     *           type="string",
     *         )
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="...",
     *     )
     * )
     */
    public function postAnswer(Request $request, int $section_id, int $lesson_id, int $question_id)
    {
        Section::findOrFail($section_id)
            ->lessons()->findOrFail($lesson_id)
            ->questions()->findOrFail($question_id);

        $request->merge(['question_id' => $question_id]);
        $request->merge(['user_id' => Auth::user()->id]);
        return parent::store($request); // TODO: Change the autogenerated stub
    }

    /**
     * @OA\Get(
     *     path="/sections/{section_id}/lessons/{lesson_id}/questions/{question_id}/answers/{answer_id}",
     *     summary="Lista a resposta de uma questão",
     *     operationId="GetQuestionAnswer",
     *     tags={"answers"},
     *     @OA\Parameter(
     *         name="section_id",
     *         in="path",
     *         description="Id da sessão",
     *         required=true,
     *         @OA\Schema(
     *           type="integer",
     *         )
     *     ),
     *     @OA\Parameter(
     *         name="lesson_id",
     *         in="path",
     *         description="Id da lição",
     *         required=true,
     *         @OA\Schema(
     *           type="integer",
     *         )
     *     ),
     *     @OA\Parameter(
     *         name="question_id",
     *         in="path",
     *         description="Id da questão",
     *         required=true,
     *         @OA\Schema(
     *           type="integer",
     *         )
     *     ),
     *     @OA\Parameter(
     *         name="answer_id",
     *         in="path",
     *         description="Id da resposta",
     *         required=true,
     *         @OA\Schema(
     *           type="string",
     *         )
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="...",
     *     )
     * )
     */
    public function getAnswer(int $section_id, int $lesson_id, int $question_id, int $answer_id)
    {
        Section::findOrFail($section_id)
            ->lessons()->findOrFail($lesson_id)
            ->questions()->findOrFail($question_id)
            ->answers()->findOrFail($answer_id);

        return parent::show($answer_id); // TODO: Change the autogenerated stub
    }

    /**
     * @OA\Put(
     *     path="/sections/{section_id}/lessons/{lesson_id}/questions/{question_id}/answers/{answer_id}",
     *     summary="Atualiza a resposta de uma questão",
     *     operationId="PutQuestionAnswer",
     *     tags={"answers"},
     *     security={{"apiToken":{}}},
     *     @OA\Parameter(
     *         name="section_id",
     *         in="path",
     *         description="Id da sessão",
     *         required=true,
     *         @OA\Schema(
     *           type="integer",
     *         )
     *     ),
     *     @OA\Parameter(
     *         name="lesson_id",
     *         in="path",
     *         description="Id da lição",
     *         required=true,
     *         @OA\Schema(
     *           type="integer",
     *         )
     *     ),
     *     @OA\Parameter(
     *         name="question_id",
     *         in="path",
     *         description="Id da questão",
     *         required=true,
     *         @OA\Schema(
     *           type="integer",
     *         )
     *     ),
     *     @OA\Parameter(
     *         name="answer_id",
     *         in="path",
     *         description="Id da resposta",
     *         required=true,
     *         @OA\Schema(
     *           type="integer",
     *         )
     *     ),
     *     @OA\Parameter(
     *         name="description",
     *         in="query",
     *         description="Descrição da resposta",
     *         required=false,
     *         @OA\Schema(
     *           type="string",
     *         )
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="...",
     *     )
     * )
     */
    public function putAnswer(Request $request, int $section_id, int $lesson_id, int $question_id, int $answer_id)
    {
        $user_id = Auth::user()->id;

        Section::findOrFail($section_id)
            ->lessons()->findOrFail($lesson_id)
            ->questions()->findOrFail($question_id)
            ->answers()->findOrFail($answer_id)
            ->user()->findOrFail($user_id);

        $request->merge(['question_id' => $question_id]);
        $request->merge(['user_id' => $user_id]);
        return parent::update($request, $answer_id); // TODO: Change the autogenerated stub
    }

    /**
     * @OA\Delete(
     *     path="/sections/{section_id}/lessons/{lesson_id}/questions/{question_id}/answers/{answer_id}",
     *     summary="Apaga a resposta de uma questão",
     *     operationId="DeleteQuestionAnswer",
     *     tags={"answers"},
     *     security={{"apiToken":{}}},
     *     @OA\Parameter(
     *         name="section_id",
     *         in="path",
     *         description="Id da sessão",
     *         required=true,
     *         @OA\Schema(
     *           type="integer",
     *         )
     *     ),
     *     @OA\Parameter(
     *         name="lesson_id",
     *         in="path",
     *         description="Id da lição",
     *         required=true,
     *         @OA\Schema(
     *           type="integer",
     *         )
     *     ),
     *     @OA\Parameter(
     *         name="question_id",
     *         in="path",
     *         description="Id da questão",
     *         required=true,
     *         @OA\Schema(
     *           type="integer",
     *         )
     *     ),
     *     @OA\Parameter(
     *         name="answer_id",
     *         in="path",
     *         description="Id da resposta",
     *         required=true,
     *         @OA\Schema(
     *           type="integer",
     *         )
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="...",
     *     )
     * )
     */
    public function deleteAnswer(int $section_id, int $lesson_id, int $question_id, int $answer_id)
    {
        Section::findOrFail($section_id)
            ->lessons()->findOrFail($lesson_id)
            ->questions()->findOrFail($question_id)
            ->answers()->findOrFail($answer_id)
            ->user()->findOrFail(Auth::user()->id);

        return parent::destroy($answer_id); // TODO: Change the autogenerated stub
    }
}