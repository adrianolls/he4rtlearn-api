<?php
/**
 * Created by PhpStorm.
 * User: lucas
 * Date: 14/03/19
 * Time: 21:29
 */

namespace App\Http\Controllers\Lesson;


use App\Entities\Lesson\Lesson;
use App\FieldManagers\Lesson\LessonFieldManager;
use App\Http\Controllers\ApiController;
use App\Traits\ApiResponse;
use Illuminate\Http\Request;

class LessonController extends ApiController
{
    use ApiResponse;

    public function __construct(Lesson $model, LessonFieldManager $fieldManager)
    {
        $this->fieldManager = $fieldManager;
        $this->model = $model;
    }

    /**
     * @OA\Get(
     *     path="/sections/{section_id}/lessons",
     *     summary="Lista todas as lições",
     *     operationId="GetLessons",
     *     tags={"lessons"},
     *     @OA\Parameter(
     *         name="section_id",
     *         in="path",
     *         description="Id da seção",
     *         required=true,
     *         @OA\Schema(
     *           type="integer",
     *         )
     *     ),
     *     @OA\Parameter(
     *         name="includes",
     *         in="query",
     *         description="Faz o include das relações",
     *         required=false,
     *         @OA\Schema(
     *           type="array",
     *           @OA\Items(type="string")
     *         )
     *     ),
     *     @OA\Parameter(
     *         name="name",
     *         in="query",
     *         description="Nome da lição",
     *         required=false,
     *         @OA\Schema(
     *           type="string",
     *         )
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="...",
     *     )
     * )
     */
    public function getLessons(Request $request, $section_id)
    {
        $request->merge(['section_id' => $section_id]);
        return parent::index($request);
    }

    /**
     * @OA\Post(
     *     path="/sections/{section_id}/lessons",
     *     summary="Cria uma nova lição",
     *     operationId="StoreLesson",
     *     tags={"lessons"},
     *     @OA\Parameter(
     *         name="section_id",
     *         in="path",
     *         description="Id da seção no path",
     *         required=true,
     *         @OA\Schema(
     *           type="integer",
     *         )
     *     ),
     *     @OA\Parameter(
     *         name="name",
     *         in="query",
     *         description="Nome da lição",
     *         required=true,
     *         @OA\Schema(
     *           type="string",
     *         )
     *     ),
     *    @OA\Parameter(
     *         name="content",
     *         in="query",
     *         description="Conteúdo da lição",
     *         required=true,
     *         @OA\Schema(
     *           type="string",
     *         )
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="...",
     *     )
     * )
     */
    public function postLesson(Request $request, $section_id)
    {
        $request->merge(['section_id' => $section_id]);
        return parent::store($request); // TODO: Change the autogenerated stub
    }

    /**
     * @OA\Get(
     *     path="/sections/{section_id}/lessons/{lesson_id}",
     *     summary="Lista uma lição",
     *     operationId="GetLesson",
     *     tags={"lessons"},
     *     @OA\Parameter(
     *         name="section_id",
     *         in="path",
     *         description="Id da seção",
     *         required=true,
     *         @OA\Schema(
     *           type="integer"
     *         )
     *     ),
     *     @OA\Parameter(
     *         name="lesson_id",
     *         in="path",
     *         description="Id da lição",
     *         required=true,
     *         @OA\Schema(
     *           type="integer"
     *         )
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="...",
     *     )
     * )
     */
    public function getLesson(Request $request, int $section_id, int $lesson_id)
    {
        $lesson = Lesson::where([
            ['id', '=', $lesson_id],
            ['section_id', '=', $section_id],
        ])->first();
        if(!$lesson){
            return $this->notFound(['error' => 'This lesson doesnt exists or you are at the wrong section.']);
        }
        return parent::show($lesson_id);
    }

    /**
     * @OA\Put(
     *     path="/sections/{section_id}/lessons/{lesson_id}",
     *     summary="Atualiza uma lição",
     *     operationId="UpdateLesson",
     *     tags={"lessons"},
     *     @OA\Parameter(
     *         name="section_id",
     *         in="path",
     *         description="Id da seção",
     *         required=true,
     *         @OA\Schema(
     *           type="integer",
     *         )
     *     ),
     *     @OA\Parameter(
     *         name="lesson_id",
     *         in="path",
     *         description="Id da lição",
     *         required=true,
     *         @OA\Schema(
     *           type="integer"
     *         )
     *     ),
     *     @OA\Parameter(
     *         name="name",
     *         in="query",
     *         description="Nome da lição",
     *         required=true,
     *         @OA\Schema(
     *           type="string",
     *         )
     *     ),
     *    @OA\Parameter(
     *         name="content",
     *         in="query",
     *         description="Conteúdo da lição",
     *         required=true,
     *         @OA\Schema(
     *           type="string",
     *         )
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="...",
     *     )
     * )
     */
    public function updateLesson(Request $request, int $section_id, int $lesson_id)
    {
        $request->merge(['section_id' => $section_id]);
        $lesson = Lesson::where([
            ['id', '=', $lesson_id],
            ['section_id', '=', $section_id],
        ])->first();
        if(!$lesson){
            return $this->notFound(['error' => 'This lesson doesnt exists or you are at the wrong section.']);
        }
        return parent::update($request, $lesson_id); // TODO: Change the autogenerated stub
    }

    /**
     * @OA\Delete(
     *     path="/sections/{section_id}/lessons/{lesson_id}",
     *     summary="Lista uma lição",
     *     operationId="DeleteLesson",
     *     tags={"lessons"},
     *     @OA\Parameter(
     *         name="section_id",
     *         in="path",
     *         description="Id da seção",
     *         required=true,
     *         @OA\Schema(
     *           type="integer"
     *         )
     *     ),
     *     @OA\Parameter(
     *         name="lesson_id",
     *         in="path",
     *         description="Id da lição",
     *         required=true,
     *         @OA\Schema(
     *           type="integer"
     *         )
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="...",
     *     )
     * )
     */
    public function destroyLesson(int $section_id, int $lesson_id)
    {

        $lesson = Lesson::where([
            ['id', '=', $lesson_id],
            ['section_id', '=', $section_id],
        ])->first();
        if(!$lesson){
            return $this->notFound(['error' => 'This lesson doesnt exists or you are at the wrong section.']);
        }
        return parent::destroy($lesson_id); // TODO: Change the autogenerated stub
    }
}